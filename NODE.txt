                            Node.js

            What is Node.js?

1.Node.js is an open source server framework
2.Node.js is free
3.Node.js runs on various platforms (Windows, Linux, Unix, Mac OS X, etc.)
4.Node.js uses JavaScript on the server

           Why Node.js?

Node.js uses asynchronous programming!

A common task for a web server can be to open a file on the server and return the content to the client.

         Here is how PHP or ASP handles a file request:

1.Sends the task to the computer's file system.
2.Waits while the file system opens and reads the file.
3.Returns the content to the client.
4.Ready to handle the next request.

Here is how Node.js handles a file request:

1.Sends the task to the computer's file system.

2.Ready to handle the next request.
3.When the file system has opened and read the file, the server returns the content         
to the client.

Node.js eliminates the waiting, and simply continues with the next request.

Node.js runs single-threaded, non-blocking, asynchronously programming, which is very memory efficient.

             What Can Node.js Do?

1.Node.js can generate dynamic page content
2.Node.js can create, open, read, write, delete, and close files on the server
3.Node.js can collect form data
4.Node.js can add, delete, modify data in your database

            What is a Node.js File?

1.Node.js files contain tasks that will be executed on certain events
2.A typical event is someone trying to access a port on the server
3.Node.js files must be initiated on the server before having any effect
4.Node.js files have extension ".js"


                  HELLO WORLD
1.Create a file named something like myFirst.js in C:\Users\Your Name\myfirst.js
2.Now write in myFirst.js ::
               A.var http = require('http');

http.createServer(function (req, res) {
    res.writeHead(200, {'Content-Type': 'text/html'});
    res.end('Hello World!');
}).listen(8080);

#.require() is used to include a modules
#.createServer creates a new server Use the createServer() method to create an HTTP server:
#.req = request
#.res = responds to the request
#.res.writeHead(200, = 200 means ok, content-type = is the type of whatever content you're dealing with
#.res.write('Hello World!'); = write a response to the client
#.res.end = is the content to be displayed,end the response
#.listen(8080); is the port of the server
#.Initialize your server by typing node myFirst.js so your server will work
#.Type in your browser localhost:8080
#.The function passed into the http.createServer() method, will be executed when someone tries to access the computer on port 8080.

                 B.var http = require('http');

var server = http.createServer(function(req, res) {
     res.writeHead(200, {'content-type': 'text/plain'});
     res.end('Hello World!');
});
server.listen(3654, function() {
     console.log("Server Started....");
});

#This is another way of doing it


             What is a Module in Node.js?

Consider modules to be the same as JavaScript libraries.


              Built-in Modules
Node.js has a set of built-in modules which you can use without any further installation.

              Include Modules
To include a module, use the require() function with the name of the module:
A set of functions you want to include in your application.


                 Create Your Own Modules
You can create your own modules, and easily include them in your applications.
                 Example
1.Create a file in the folder Name and name it like myfirstmodule.js
2.Then write the following code in it:
exports.myDateTime = function () {
    return Date();
};
#Use the exports keyword to make properties and methods available outside the module file.
3.Then create another file in the same folder and name it like demo_module.js
4.Then write the following code:

var http = require('http');
var dt = require('./myfirstmodule');

http.createServer(function(req, res) {
     res.writeHead(200, {'content-type': 'text/html'});
     res.write("The time and date are currently: " + dt.myDateTime());
     res.end();
}).listen(8080);

5.Then initialize demo_module.js by typing node demo_module.js and the server will work

                      The Built-in HTTP Module
Node.js has a built-in module called HTTP, which allows Node.js to transfer data over the Hyper Text Transfer Protocol (HTTP).
var http = require('http');
http.createServer(function (req, res) {
    res.writeHead(200, {'Content-Type': 'text/html'});
    res.write(req.url);
    res.end();
}).listen(8080);

                       Split the Query String
There are built-in modules to easily split the query string into readable parts, such as the URL module.
var http = require('http');
var url = require('url');

http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  var q = url.parse(req.url, true).query;
  var txt = q.year + " " + q.month;
  res.end(txt);
}).listen(8080);


                     Node.js as a File Server
The Node.js file system module allow you to work with the file system on your computer.
To include the File System module, use the require() method:
var fs = require('fs');

             Common use for the File System module:

1.Read files
2.Create files
3.Update files
4.Delete files
5.Rename files

              Read Files
The fs.readFile() method is used to read files on your computer.


           Create Files
The File System module has methods for creating new files:

1.fs.appendFile()
2.fs.open()
3.fs.writeFile()

#The fs.appendFile() method appends specified content to a file. If the file does not exist, the file will be created:
var fs = require('fs');

fs.appendFile('mynewfile1.txt', 'Hello content!', function (err) {
  if (err) throw err;
  console.log('Saved!');
});

#The fs.open() method takes a "flag" as the second argument, if the flag is "w" for "writing", the specified file is opened for writing. If the file does not exist, an empty file is created:
var fs = require('fs');

fs.open('mynewfile2.txt', 'w', function (err, file) {
  if (err) throw err;
  console.log('Saved!');
});

#The fs.writeFile() method replaces the specified file and content if it exists. If the file does not exists a new file, containing the specified content, will be created:
var fs = require('fs');

fs.writeFile('mynewfile3.txt', 'Hello content!', function (err) {
  if (err) throw err;
  console.log('Saved!');
});

             Update Files
The File System module has methods for updating files:

1.fs.appendFile()
2.fs.writeFile()
#The fs.appendFile() method appends the specified content at the end of the specified file:
#The fs.writeFile() method replaces the specified file and content:

                 Delete Files
To delete a file with the File System module,  use the fs.unlink() method.

The fs.unlink() method deletes the specified file:

                 Rename Files
To rename a file with the File System module,  use the fs.rename() method.

The fs.rename() method renames the specified file:

                 What is NPM?
NPM is a package manager for Node.js packages, or modules if you like.
www.npmjs.com hosts thousands of free packages to download and use.

                 What is a Package?
A package in Node.js contains all the files you need for a module.

Modules are JavaScript libraries you can include in your project.

                 Download a Package
Open the command line interface and tell NPM to download the package you want.

I want to download a package called "upper-case":

Download "upper-case":

C:\Users\Your Name>npm install upper-case

                Using a Package
var uc = require('upper-case');
var http = require('http');
var uc = require('upper-case');
http.createServer(function (req, res) {
    res.writeHead(200, {'Content-Type': 'text/html'});
    res.write(uc("Hello World!"));
    res.end();
}).listen(8080);

                Events in Node.js
Every action on a computer is an event. Like when a connection is made or a file is opened.

Objects in Node.js can fire events, like the readStream object fires events when opening and closing a file:
var fs = require('fs');
var rs = fs.createReadStream('./demofile.txt');
rs.on('open', function () {
  console.log('The file is open');
});

                 Events Module
Node.js have a built-in module, called "Events", where you can create-, fire-, and listen for- your own events.
var fs = require('fs');
var rs = fs.createReadStream('./demofile.txt');
rs.on('open', function () {
  console.log('The file is open');
});

To include the built-in Events module use the require() method. In addition, all event properties and methods are an instance of an EventEmitter object. To be able to access these properties and methods, create an EventEmitter object:
var events = require('events');
var eventEmitter = new events.EventEmitter();


                  The EventEmitter Object
You can assign event handlers to your own events with the EventEmitter object.

In the example below we have created a function that will be executed when a "scream" event is fired.

To fire an event, use the emit() method.
var events = require('events');
var eventEmitter = new events.EventEmitter();

//Create an event handler:
var myEventHandler = function () {
  console.log('I hear a scream!');
}

//Assign the event handler to an event:
eventEmitter.on('scream', myEventHandler);

//Fire the 'scream' event:
eventEmitter.emit('scream');



                 The Formidable Module
There is a very good module for working with file uploads, called "Formidable".

The Formidable module can be downloaded and installed using NPM:

After you have downloaded the Formidable module, you can include the module in any application:

var formidable = require('formidable');


               Step 1: Create an Upload Form
Create a Node.js file that writes an HTML form, with an upload field:

Example
This code will produce an HTML form:

var http = require('http');

http.createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/html'});
  res.write('<form action="fileupload" method="post" enctype="multipart/form-data">');
  res.write('<input type="file" name="filetoupload"><br>');
  res.write('<input type="submit">');
  res.write('</form>');
  return res.end();
}).listen(8080);

Step 2: Parse the Uploaded File
Include the Formidable module to be able to parse the uploaded file once it reaches the server.

When the file is uploaded and parsed, it gets placed on a temporary folder on your computer.

Example
The file will be uploaded, and placed on a temporary folder:

var http = require('http');
var formidable = require('formidable');

http.createServer(function (req, res) {
  if (req.url == '/fileupload') {
    var form = new formidable.IncomingForm();
    form.parse(req, function (err, fields, files) {
      res.write('File uploaded');
      res.end();
    });
  } else {
    res.writeHead(200, {'Content-Type': 'text/html'});
    res.write('<form action="fileupload" method="post" enctype="multipart/form-data">');
    res.write('<input type="file" name="filetoupload"><br>');
    res.write('<input type="submit">');
    res.write('</form>');
    return res.end();
  }
}).listen(8080);

                   Step 3: Save the File
When a file is successfully uploaded to the server, it is placed on a temporary folder.

The path to this directory can be found in the "files" object, passed as the second argument in the parse() method's callback function.

To move the file to the folder of your choice, use the File System module, and rename the file:

Example
Include the fs module, and move the file to the current folder:

var http = require('http');
var formidable = require('formidable');
var fs = require('fs');

http.createServer(function (req, res) {
  if (req.url == '/fileupload') {
    var form = new formidable.IncomingForm();
    form.parse(req, function (err, fields, files) {
      var oldpath = files.filetoupload.path;
      var newpath = 'C:/Users/Your Name/' + files.filetoupload.name;
      fs.rename(oldpath, newpath, function (err) {
        if (err) throw err;
        res.write('File uploaded and moved!');
        res.end();
      });
 });
  } else {
    res.writeHead(200, {'Content-Type': 'text/html'});
    res.write('<form action="fileupload" method="post" enctype="multipart/form-data">');
    res.write('<input type="file" name="filetoupload"><br>');
    res.write('<input type="submit">');
    res.write('</form>');
    return res.end();
  }
}).listen(8080);
